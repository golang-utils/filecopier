// This file was generated by counterfeiter
package filecopier

import (
	"sync"
)

type Fake struct {
	FsStub        func(srcPath string, dstPath string) (err error)
	fsMutex       sync.RWMutex
	fsArgsForCall []struct {
		srcPath string
		dstPath string
	}
	fsReturns struct {
		result1 error
	}
	fsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) Fs(srcPath string, dstPath string) (err error) {
	fake.fsMutex.Lock()
	ret, specificReturn := fake.fsReturnsOnCall[len(fake.fsArgsForCall)]
	fake.fsArgsForCall = append(fake.fsArgsForCall, struct {
		srcPath string
		dstPath string
	}{srcPath, dstPath})
	fake.recordInvocation("Fs", []interface{}{srcPath, dstPath})
	fake.fsMutex.Unlock()
	if fake.FsStub != nil {
		return fake.FsStub(srcPath, dstPath)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.fsReturns.result1
}

func (fake *Fake) FsCallCount() int {
	fake.fsMutex.RLock()
	defer fake.fsMutex.RUnlock()
	return len(fake.fsArgsForCall)
}

func (fake *Fake) FsArgsForCall(i int) (string, string) {
	fake.fsMutex.RLock()
	defer fake.fsMutex.RUnlock()
	return fake.fsArgsForCall[i].srcPath, fake.fsArgsForCall[i].dstPath
}

func (fake *Fake) FsReturns(result1 error) {
	fake.FsStub = nil
	fake.fsReturns = struct {
		result1 error
	}{result1}
}

func (fake *Fake) FsReturnsOnCall(i int, result1 error) {
	fake.FsStub = nil
	if fake.fsReturnsOnCall == nil {
		fake.fsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.fsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fsMutex.RLock()
	defer fake.fsMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ FileCopier = new(Fake)
